name: Publish Vivichains Node

on:
  workflow_call:
    secrets:
      PYPI_REGISTRY_USERNAME:
        description: 'Username for the PyPI registry'
        required: true
      PYPI_REGISTRY_PASSWORD:
        description: 'Password for the PyPI registry'
        required: true
      DOCKER_REGISTRY_USERNAME:
        description: 'Username for the Docker registry'
        required: false
      DOCKER_REGISTRY_PASSWORD:
        description: 'Password for the Docker registry'
        required: false
      DOCKER_REGISTRY_URL:
        description: 'Docker registry URL'
        required: false
    inputs:
      BRANCH_NAME:
        description: 'The branch name to use for the release'
        required: false
        default: 'main'
        type: string
      DOCKER_IMAGE_NAME:
        description: 'The Docker image name to use (e.g., my-org/my-app). If not provided, defaults to github.repository'
        required: false
        type: string
jobs:    
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.BRANCH_NAME }}
          fetch-tags: true
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup Poetry
        uses: abatilo/actions-poetry@v4
        with:
          poetry-version: '2.1.3'
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config repositories.private-pypi http://120.26.72.60:5002
          poetry config http-basic.private-pypi ${{ secrets.PYPI_REGISTRY_USERNAME }} ${{ secrets.PYPI_REGISTRY_PASSWORD }}
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - name: Define a cache for the virtual environment based on the dependencies lock file
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Check if version tag exists in branch
        run: |
          git fetch --tags
          version=$(poetry version -s)
          tag_exists=$(git tag -l "v$version" | grep -w "v$version" || true)
          if [ -z "$tag_exists" ]; then
            echo "Version tag does not exist, proceeding with tagging."
            echo "VERSION_TAG_EXISTS=false" >> $GITHUB_ENV
          else
            echo "Version tag already exists, skipping tag creation."
            echo "VERSION_TAG_EXISTS=true" >> $GITHUB_ENV
          fi
      - name: Publish Package
        if: env.VERSION_TAG_EXISTS == 'false'
        run: |
          poetry config repositories.private-pypi http://120.26.72.60:5002
          poetry build
          poetry publish -r private-pypi -u ${{ secrets.PYPI_REGISTRY_USERNAME }} -p ${{ secrets.PYPI_REGISTRY_PASSWORD }}
      - name: Tag the release
        if: env.VERSION_TAG_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 提供的 token
        run: |
          git config --global user.email "ci@vivichains.com"
          git config --global user.name "CI Bot"
          version=$(poetry version -s)
          git tag -a "v$version" -m "Release version $version"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} "v$version"
      
      - name: Debug branch information
        if: env.VERSION_TAG_EXISTS == 'false'
        run: |
          echo "inputs.BRANCH_NAME: '${{ inputs.BRANCH_NAME }}'"
          echo "github.ref_name: '${{ github.ref_name }}'"
          echo "github.ref: '${{ github.ref }}'"
          echo "Current branch check result: ${{ inputs.BRANCH_NAME == 'main' || github.ref_name == 'main' }}"
      
      - name: Check for Dockerfile
        if: env.VERSION_TAG_EXISTS == 'false' && (inputs.BRANCH_NAME == 'main' || github.ref_name == 'main')
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Dockerfile found, proceeding with Docker build."
            echo "DOCKERFILE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No Dockerfile found, skipping Docker build."
            echo "DOCKERFILE_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: Debug Docker configuration
        if: env.VERSION_TAG_EXISTS == 'false' && (inputs.BRANCH_NAME == 'main' || github.ref_name == 'main') && env.DOCKERFILE_EXISTS == 'true'
        run: |
          echo "DOCKER_REGISTRY_URL: '${{ secrets.DOCKER_REGISTRY_URL }}'"
          echo "DOCKER_IMAGE_NAME: '${{ inputs.DOCKER_IMAGE_NAME }}'"
          echo "github.repository: '${{ github.repository }}'"
          echo "Final image name will be: ${{ secrets.DOCKER_REGISTRY_URL }}/${{ inputs.DOCKER_IMAGE_NAME || github.repository }}"
      
      - name: Set up Docker Buildx
        if: env.VERSION_TAG_EXISTS == 'false' && (inputs.BRANCH_NAME == 'main' || github.ref_name == 'main') && env.DOCKERFILE_EXISTS == 'true' && secrets.DOCKER_REGISTRY_URL != '' && secrets.DOCKER_REGISTRY_USERNAME != '' && secrets.DOCKER_REGISTRY_PASSWORD != ''
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Registry
        if: env.VERSION_TAG_EXISTS == 'false' && (inputs.BRANCH_NAME == 'main' || github.ref_name == 'main') && env.DOCKERFILE_EXISTS == 'true' && secrets.DOCKER_REGISTRY_URL != '' && secrets.DOCKER_REGISTRY_USERNAME != '' && secrets.DOCKER_REGISTRY_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      
      - name: Extract metadata for Docker
        if: env.VERSION_TAG_EXISTS == 'false' && (inputs.BRANCH_NAME == 'main' || github.ref_name == 'main') && env.DOCKERFILE_EXISTS == 'true' && secrets.DOCKER_REGISTRY_URL != '' && secrets.DOCKER_REGISTRY_USERNAME != '' && secrets.DOCKER_REGISTRY_PASSWORD != ''
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_REGISTRY_URL }}/${{ inputs.DOCKER_IMAGE_NAME || github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        if: env.VERSION_TAG_EXISTS == 'false' && (inputs.BRANCH_NAME == 'main' || github.ref_name == 'main') && env.DOCKERFILE_EXISTS == 'true' && secrets.DOCKER_REGISTRY_URL != '' && secrets.DOCKER_REGISTRY_USERNAME != '' && secrets.DOCKER_REGISTRY_PASSWORD != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYPI_REGISTRY_USERNAME=${{ secrets.PYPI_REGISTRY_USERNAME }}
            PYPI_REGISTRY_PASSWORD=${{ secrets.PYPI_REGISTRY_PASSWORD }}